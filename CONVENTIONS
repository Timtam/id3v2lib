NAMING AND CODING CONVENTIONS

These rules are designed to
 * make the code look identical, programmer-independency
 * make it easier to understand a strangers code
 * let the user know what he/she has to search for by providing an understandable naming system
 * provide a both user-friendly and powerful programming library which is easily extendable.

EVERYTHING HAS TO BE EITHER LOWERCASE OR UPPERCASE, NOT BOTH AS MIXTURE

		All function calls and variables have consequently to be lower case.
All constants, macro and non-macro, have to be consequently upper case.

SEPARATE WORDS IDENTICALLY

Functions, variables and macros consisting of multiple words need to be named after the words devided by a _ separator.

CONSTRUCT VARIABLE AND FUNCTION NAMES LOGICALLY

The user should know what he/she has to search for if he/she has an idea of what he/she wants to do.
That means the function names must follow a logical construction order: id3v2_a_b_c_d
explanation:
a is always a verb which defines what this function does, e.g. load, get, set, put, find...
b is a noun which described the return value, e.g. tag, header, string, frame...
c is a preposition giving the relation to d and what to do with it, e.g. on, from, with, of, in...
d is the source object to get b from, e.g. file, buffer, string, header, frame, tag...
a, b, c or d can also contain several words, in this case they should be devided by underscores too.
Parts of this naming structuree can be left off or switched if it would otherwise be without sense, e.g. int id3v2_find_bool_in_buffer(char *buffer) doesn't say the same like int id3v2_buffer_has_bom(char *buffer), at least not since it actually doesn't say anything about what it is doing.
This pattern is only to be used for functions which are ment to be used by the public. Internal functions only can drop the id3v2 prefix and therefore just start with _. the a_b_c_d pattern though should be used here too.
All external functions and all constants should start with id3v2_ (constants upper case, functions lower case of course).
Internal functions and constants/macros may drop the ID3V2_ prefix and also the naming scheme, although it should be clear what they're doing.

Variables don't have a specified naming scheme, except the delimiter and that they should explain their purpose on their own.

INDENTATION

All code files should have the same indentation scheme and formatting style. For this purpose you'll find an indent.sh file in the root of this repository. Executing this will indent all code files the same way. Use this at least before submitting a pull request or releasing a new version, meaning tagging it with a new version number.

ERROR INFORMATION SYSTEM

All id3v2_ functions ment to be used by the public should implement the error system which informs the user about the reason why a function failed.
You can use the E_FAIL macro with the relevant error code or easily the E_SUCCESS macros for your convinience.
Define new error codes in the relevant enum in errors.h, but prevent defining multiple error codes with the same meaning.

Try to get a fluid codestyle into this project.

This naming scheme was provided by Toni Barth (Timtam) and is free to be modivied and optimized later on.
